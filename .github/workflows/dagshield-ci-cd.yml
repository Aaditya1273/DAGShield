name: DAGShield CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: dagshield/node-client
  NODE_VERSION: '18'
  RUST_VERSION: '1.75'
  PYTHON_VERSION: '3.11'

jobs:
  # Frontend Tests & Build
  frontend-test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run ESLint
      run: npm run lint
    
    - name: Run TypeScript check
      run: npm run type-check
    
    - name: Run frontend tests
      run: npm run test:ci
    
    - name: Build frontend
      run: npm run build
      env:
        NEXT_PUBLIC_U2U_RPC_URL: ${{ secrets.U2U_TESTNET_RPC }}
        NEXT_PUBLIC_CHAIN_ID: "2484"
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: frontend-build
        path: .next/

  # Smart Contract Tests & Deployment
  contracts-test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Install Hardhat dependencies
      run: npm ci
    
    - name: Compile contracts
      run: npx hardhat compile
    
    - name: Run contract tests
      run: npx hardhat test
    
    - name: Run gas reporter
      run: npx hardhat test --reporter gas
    
    - name: Run security audit
      run: |
        npm install -g @crytic/slither-analyzer
        slither contracts/ --print human-summary
    
    - name: Deploy to U2U Testnet
      if: github.ref == 'refs/heads/develop'
      run: npx hardhat deploy --network u2uTestnet
      env:
        U2U_TESTNET_RPC: ${{ secrets.U2U_TESTNET_RPC }}
        PRIVATE_KEY: ${{ secrets.DEPLOYER_PRIVATE_KEY }}
        ETHERSCAN_API_KEY: ${{ secrets.U2U_EXPLORER_API_KEY }}

  # Rust Node Client Tests & Build
  rust-test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        toolchain: ${{ env.RUST_VERSION }}
        components: rustfmt, clippy
    
    - name: Cache Rust dependencies
      uses: Swatinem/rust-cache@v2
      with:
        workspaces: node-client
    
    - name: Check formatting
      run: cargo fmt --all -- --check
      working-directory: node-client
    
    - name: Run Clippy
      run: cargo clippy --all-targets --all-features -- -D warnings
      working-directory: node-client
    
    - name: Run tests
      run: cargo test --verbose
      working-directory: node-client
    
    - name: Run benchmarks
      run: cargo bench --no-run
      working-directory: node-client
    
    - name: Build release binary
      run: cargo build --release
      working-directory: node-client
    
    - name: Upload binary artifacts
      uses: actions/upload-artifact@v4
      with:
        name: rust-binary
        path: node-client/target/release/dagshield-node

  # AI Model Tests
  ai-model-test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r ai-models/requirements.txt
    
    - name: Run AI model tests
      run: python -m pytest ai-models/tests/ -v
    
    - name: Test threat detection accuracy
      run: python ai-models/test_accuracy.py
    
    - name: Validate ONNX models
      run: python ai-models/validate_models.py

  # Security Audit
  security-audit:
    runs-on: ubuntu-latest
    needs: [contracts-test]
    steps:
    - uses: actions/checkout@v4
    
    - name: Run Mythril analysis
      run: |
        pip install mythril
        myth analyze contracts/DAGShieldToken.sol --solv 0.8.24
    
    - name: Run Semgrep security scan
      uses: returntocorp/semgrep-action@v1
      with:
        config: >-
          p/security-audit
          p/secrets
          p/owasp-top-ten
    
    - name: Dependency vulnerability scan
      run: |
        npm audit --audit-level high
        cargo audit --deny warnings
      working-directory: node-client

  # Performance Benchmarks
  performance-test:
    runs-on: ubuntu-latest
    needs: [rust-test]
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        toolchain: ${{ env.RUST_VERSION }}
    
    - name: Download binary
      uses: actions/download-artifact@v4
      with:
        name: rust-binary
        path: ./
    
    - name: Make binary executable
      run: chmod +x dagshield-node
    
    - name: Run DAG processing benchmark
      run: |
        ./dagshield-node --benchmark --duration 60 > benchmark_results.txt
        cat benchmark_results.txt
    
    - name: Upload benchmark results
      uses: actions/upload-artifact@v4
      with:
        name: benchmark-results
        path: benchmark_results.txt

  # Docker Build & Push
  docker-build:
    runs-on: ubuntu-latest
    needs: [frontend-test, rust-test, ai-model-test]
    permissions:
      contents: read
      packages: write
    steps:
    - uses: actions/checkout@v4
    
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        build-args: |
          BUILDKIT_INLINE_CACHE=1

  # Deploy to Staging
  deploy-staging:
    runs-on: ubuntu-latest
    needs: [docker-build, contracts-test]
    if: github.ref == 'refs/heads/develop'
    environment: staging
    steps:
    - uses: actions/checkout@v4
    
    - name: Deploy to U2U Testnet
      run: |
        echo "Deploying to U2U Testnet staging environment"
        # Add deployment scripts here
    
    - name: Run integration tests
      run: |
        npm run test:integration:staging
      env:
        STAGING_API_URL: ${{ secrets.STAGING_API_URL }}
        U2U_TESTNET_RPC: ${{ secrets.U2U_TESTNET_RPC }}
    
    - name: Notify deployment
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}

  # Deploy to Production
  deploy-production:
    runs-on: ubuntu-latest
    needs: [deploy-staging, security-audit, performance-test]
    if: github.event_name == 'release'
    environment: production
    steps:
    - uses: actions/checkout@v4
    
    - name: Deploy contracts to U2U Mainnet
      run: npx hardhat deploy --network u2uMainnet
      env:
        U2U_MAINNET_RPC: ${{ secrets.U2U_MAINNET_RPC }}
        PRIVATE_KEY: ${{ secrets.MAINNET_DEPLOYER_PRIVATE_KEY }}
    
    - name: Deploy frontend to Vercel
      uses: amondnet/vercel-action@v25
      with:
        vercel-token: ${{ secrets.VERCEL_TOKEN }}
        vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
        vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
        vercel-args: '--prod'
    
    - name: Deploy node client to cloud
      run: |
        echo "Deploying node client to production cloud infrastructure"
        # Add cloud deployment scripts (AWS/GCP/Oracle)
    
    - name: Run production smoke tests
      run: |
        npm run test:smoke:production
      env:
        PRODUCTION_API_URL: ${{ secrets.PRODUCTION_API_URL }}
        U2U_MAINNET_RPC: ${{ secrets.U2U_MAINNET_RPC }}
    
    - name: Update documentation
      run: |
        npm run docs:generate
        npm run docs:deploy
    
    - name: Notify production deployment
      uses: 8398a7/action-slack@v3
      with:
        status: success
        channel: '#general'
        text: 'ðŸš€ DAGShield v${{ github.event.release.tag_name }} deployed to production!'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}

  # Generate Release Assets
  release-assets:
    runs-on: ubuntu-latest
    needs: [frontend-test, rust-test, contracts-test]
    if: github.event_name == 'release'
    steps:
    - uses: actions/checkout@v4
    
    - name: Download all artifacts
      uses: actions/download-artifact@v4
    
    - name: Create release package
      run: |
        mkdir -p release-package
        cp -r frontend-build release-package/
        cp rust-binary/dagshield-node release-package/
        cp -r contracts/artifacts release-package/contracts
        cp README.md release-package/
        cp DEPLOYMENT.md release-package/
        tar -czf dagshield-${{ github.event.release.tag_name }}.tar.gz release-package/
    
    - name: Upload release assets
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: ./dagshield-${{ github.event.release.tag_name }}.tar.gz
        asset_name: dagshield-${{ github.event.release.tag_name }}.tar.gz
        asset_content_type: application/gzip

  # Post-deployment monitoring
  monitoring-setup:
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: github.event_name == 'release'
    steps:
    - name: Setup monitoring alerts
      run: |
        echo "Setting up production monitoring and alerts"
        # Add monitoring setup scripts
    
    - name: Configure dashboards
      run: |
        echo "Configuring Grafana dashboards for DAGShield metrics"
        # Add dashboard configuration
    
    - name: Test alert systems
      run: |
        echo "Testing alert systems and notification channels"
        # Add alert testing scripts
